# -*- coding: utf-8 -*-
"""Musical Language.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14FU689TeAWEL1fr7a-m64qR1ttSKWC7B
"""

import numpy as np
from IPython.display import Audio
from scipy.io import wavfile
import matplotlib.pyplot as plt
from scipy import signal
from PIL import Image
import pandas as pd

"""<img src = "https://upload.wikimedia.org/wikipedia/commons/thumb/d/d4/Solresol_representations.svg/1920px-Solresol_representations.svg.png">

<img src ="https://robertnielsen21.files.wordpress.com/2013/08/solresol-example.png">

https://www.omniglot.com/radio/?p=237

https://docs.google.com/spreadsheets/d/1eSIfSpSsBdLXkKbnLhD-pPP92iNPKeqDsWnB-z0aZ0k/edit#gid=0
"""

df1 = pd.read_csv("https://docs.google.com/spreadsheets/d/1eSIfSpSsBdLXkKbnLhD-pPP92iNPKeqDsWnB-z0aZ0k/export?format=csv",header=None).replace(np.nan, '', regex=True)

df1

df = np.array(df1)

colors = np.zeros((8,50,50,3))
colors[0] = np.array(Image.new('RGB',(50,50),(255, 255, 255)))
colors[1] = Image.new('RGB',(50,50),(181, 0, 40))
colors[2] = Image.new('RGB',(50,50),(218, 86, 23))
colors[3] = Image.new('RGB',(50,50),(230, 181, 10))
colors[4] = Image.new('RGB',(50,50),(20, 150, 86))
colors[5] = Image.new('RGB',(50,50),(22, 165, 160))
colors[6] = Image.new('RGB',(50,50),(14, 112, 168))
colors[7] = Image.new('RGB',(50,50),(79, 50, 102))
colors = colors/255.0

color_word = (colors[0],colors[1],colors[2],colors[3],colors[4],colors[5],colors[6],colors[7])

plt.imshow(np.concatenate(color_word,axis=1))

df1[df1[1].str.match('I')]

def translate(s):
    return df1[df1[1].str.match(s)]

translate("I")

translate("Talk")

translate("Language")

def get_word(n):
    word = df[n][0].lower()
    word = (word.replace("do", "1,").replace("re", "2,").replace("mi", "3,").replace("fa", "4,").replace("sol", "5,").replace("la", "6,").replace("si", "7,"))[:-1]
    w = np.array(word.split(',')).astype(int)
    return w

get_word(7)

translate("Talk")[0]

def draw_word(n):
    w = get_word(n)
    plt.imshow(np.concatenate(colors[[w]],axis=1))

draw_word(7)

draw_word(361)

draw_word(202)

def draw_sentence(n):
    s = colors[0]
    for i in range(len(n)):
        w = get_word(n[i])
        word = np.concatenate(colors[[w]],axis=1)
        s = np.concatenate((s,word,colors[0]),axis=1)
    plt.imshow(s)

s = (7,361,202)
draw_sentence(s)



def f(x):
    return np.sin(x)
    # return signal.sawtooth(x)

framerate=44100
t   = np.linspace(0,5,framerate*5)
t   = t[:5512]

do  = f(2*np.pi* 261.626 *t)
re  = f(2*np.pi* 293.665 *t)
me  = f(2*np.pi* 329.628 *t)
fa  = f(2*np.pi* 349.228 *t)
sol = f(2*np.pi* 391.995 *t)
la  = f(2*np.pi* 440.000 *t)
si  = f(2*np.pi* 493.883 *t)

rest = f(2*np.pi*0*t)
data = np.concatenate((do,rest,re,rest,me,rest,fa,rest,sol,rest,la,rest,si))

Audio(data,rate=framerate)









tones = np.zeros((8,do.shape[0]))
tones[0] = rest
tones[1] = do
tones[2] = re
tones[3] = me
tones[4] = fa
tones[5] = sol
tones[6] = la
tones[7] = si

def sing_sentence(n):
    s = tones[0]
    for i in range(len(n)):
        w = get_word(n[i])
        word = np.concatenate(tones[[w]])
        s = np.concatenate((s,word,tones[0]))
    return s

s = (7,361,202) # I speak Solresol
song = sing_sentence(s)

Audio(song,rate=.8*framerate)

draw_sentence(s)



translate("Mechanics")

translate("Calculate")

translate("See")

s = (2078,1443,344)
draw_sentence(s)
song = sing_sentence(s)
Audio(song,rate=framerate)



translate("Good")

translate("Green")

translate("Farm")

s = (45,998,954)
draw_sentence(s)
song = sing_sentence(s)
Audio(song,rate=framerate)



translate("Farm")

df1[df1[1].str.match("Farm")]

np.where(np.array(df1[1].str.match("Farm")))[0][0]



def translate2(s):
    return np.where(np.array(df1[1].str.match(s)))[0][0]

s = "Good Green Farm"

s = s.split(" ")

s2 = np.zeros(len(s))

for i in range(len(s)):
    s2[i] = translate2(s[i])

s2 = s2.astype(int)

s2

s = s2
draw_sentence(s)
song = sing_sentence(s)
Audio(song,rate=framerate)



s = "Bad"

s = s.split(" ")
s2 = np.zeros(len(s))
for i in range(len(s)):
    s2[i] = translate2(s[i])
s2 = s2.astype(int)
s2
s = s2
draw_sentence(s)
song = sing_sentence(s)
Audio(song,rate=framerate)



s = "Good Morning Love"

s = s.split(" ")
s2 = np.zeros(len(s))
for i in range(len(s)):
    s2[i] = translate2(s[i])
s2 = s2.astype(int)
s2
s = s2
draw_sentence(s)
song = sing_sentence(s)
Audio(song,rate=framerate)



s = "Sweet"

s = s.split(" ")
s2 = np.zeros(len(s))
for i in range(len(s)):
    s2[i] = translate2(s[i])
s2 = s2.astype(int)
s2
s = s2
draw_sentence(s)
song = sing_sentence(s)
Audio(song,rate=framerate)



s = "Tan"

s = s.split(" ")
s2 = np.zeros(len(s))
for i in range(len(s)):
    s2[i] = translate2(s[i])
s2 = s2.astype(int)
s2
s = s2
draw_sentence(s)
song = sing_sentence(s)
Audio(song,rate=framerate)



s = "Yes"

s = s.split(" ")
s2 = np.zeros(len(s))
for i in range(len(s)):
    s2[i] = translate2(s[i])
s2 = s2.astype(int)
s2
s = s2
draw_sentence(s)
song = sing_sentence(s)
Audio(song,rate=framerate)

s = "No"

s = s.split(" ")
s2 = np.zeros(len(s))
for i in range(len(s)):
    s2[i] = translate2(s[i])
s2 = s2.astype(int)
s2
s = s2
draw_sentence(s)
song = sing_sentence(s)
Audio(song,rate=framerate)



translate("Well")

translate("Wrong")

s = "Well"

s = s.split(" ")
s2 = np.zeros(len(s))
for i in range(len(s)):
    s2[i] = translate2(s[i])
s2 = s2.astype(int)
s2
s = s2
draw_sentence(s)
song = sing_sentence(s)
Audio(song,rate=framerate)





framerate = 44100

time = 5

t = np.linspace(0,time,framerate*time)

data = np.sin(2*3.14159*440*t)

data.shape

plt.plot(t[0:1000],data[0:1000])

Audio(data,rate=framerate)

framerate=44100



frequency = 11025
frequency2 = 5512
t = np.linspace(0,5,framerate*5)
e5 = signal.sawtooth(2*np.pi* 659.25 *t)
d5 = signal.sawtooth(2*np.pi* 587.33 *t)
c5 = signal.sawtooth(2*np.pi* 523.25 *t)
b4 = signal.sawtooth(2*np.pi* 493.88 *t)
g4 = signal.sawtooth(2*np.pi* 392 *t)
e4 = signal.sawtooth(2*np.pi* 329.63 *t)
a4 = signal.sawtooth(2*np.pi* 440 *t)
a5 = signal.sawtooth(2*np.pi*880*t)

rest = signal.sawtooth(2*np.pi*0*t)
data1 = np.concatenate((e5[0:frequency],d5[0:frequency2],c5[0:frequency2],b4[0:frequency2],g4[0:frequency2],e4[0:frequency],a4[0:frequency2], b4[0:frequency2], c5[0:frequency2], d5[0:frequency2], b4[0:frequency]))
data2 = np.concatenate((rest[0:frequency],a5[0:frequency],rest[0:frequency], e5[0:frequency], rest[0:frequency], c5[0:frequency], b4[0:frequency], a4[0:frequency], rest[0:frequency] ))
data3 = np.concatenate((a4[0:frequency], b4[0:frequency], c5[0:frequency], b4[0:frequency], g4[0:frequency], a4[0:frequency], e4[0:frequency]))
data = np.concatenate((data1,data2,data3))

Audio(data,rate=framerate)

f, t, Sxx = signal.spectrogram(data, framerate)
plt.pcolormesh(t, f[0:25], Sxx[0:25,:])
plt.ylabel('Frequency [Hz]')
plt.xlabel('Time [sec]')
plt.show()

f, t, Sxx = signal.spectrogram(data, framerate)
plt.pcolormesh(t, f[0:25], Sxx[0:25,:])
plt.ylabel('Frequency [Hz]')
plt.xlabel('Time [sec]')
plt.show()

frequency = 11025
frequency2 = 5512
t = np.linspace(0,5,framerate*5)
e5 = signal.square(2*np.pi* 659.25 *t)
d5 = signal.square(2*np.pi* 587.33 *t)
c5 = signal.square(2*np.pi* 523.25 *t)
b4 = signal.square(2*np.pi* 493.88 *t)
g4 = signal.square(2*np.pi* 392 *t)
e4 = signal.square(2*np.pi* 329.63 *t)
a4 = signal.square(2*np.pi* 440 *t)
a5 = signal.square(2*np.pi*880*t)

rest = signal.square(2*np.pi*0*t)
data1 = np.concatenate((e5[0:frequency],d5[0:frequency2],c5[0:frequency2],b4[0:frequency2],g4[0:frequency2],e4[0:frequency],a4[0:frequency2], b4[0:frequency2], c5[0:frequency2], d5[0:frequency2], b4[0:frequency]))
data2 = np.concatenate((rest[0:frequency],a5[0:frequency],rest[0:frequency], e5[0:frequency], rest[0:frequency], c5[0:frequency], b4[0:frequency], a4[0:frequency], rest[0:frequency] ))
data3 = np.concatenate((a4[0:frequency], b4[0:frequency], c5[0:frequency], b4[0:frequency], g4[0:frequency], a4[0:frequency], e4[0:frequency]))
data = np.concatenate((data1,data2,data3))

Audio(data,rate=framerate)

Audio(a4[0:frequency],rate=framerate)

Audio(b4[0:frequency],rate=framerate)

# Dictionary representing the morse code chart
MORSE_CODE_DICT = { 'A':'.-', 'B':'-...',
                    'C':'-.-.', 'D':'-..', 'E':'.',
                    'F':'..-.', 'G':'--.', 'H':'....',
                    'I':'..', 'J':'.---', 'K':'-.-',
                    'L':'.-..', 'M':'--', 'N':'-.',
                    'O':'---', 'P':'.--.', 'Q':'--.-',
                    'R':'.-.', 'S':'...', 'T':'-',
                    'U':'..-', 'V':'...-', 'W':'.--',
                    'X':'-..-', 'Y':'-.--', 'Z':'--..',
                    '1':'.----', '2':'..---', '3':'...--',
                    '4':'....-', '5':'.....', '6':'-....',
                    '7':'--...', '8':'---..', '9':'----.',
                    '0':'-----', ', ':'--..--', '.':'.-.-.-',
                    '?':'..--..', '/':'-..-.', '-':'-....-',
                    '(':'-.--.', ')':'-.--.-'}

# Function to encrypt the string
# according to the morse code chart
def encrypt(message):
    cipher = ''
    for letter in message:
        if letter != ' ':

            # Looks up the dictionary and adds the
            # correspponding morse code
            # along with a space to separate
            # morse codes for different characters
            cipher += MORSE_CODE_DICT[letter] + ' '
        else:
            # 1 space indicates different characters
            # and 2 indicates different words
            cipher += ' '

    return cipher

# Function to decrypt the string
# from morse to english
def decrypt(message):

    # extra space added at the end to access the
    # last morse code
    message += ' '

    decipher = ''
    citext = ''
    for letter in message:

        # checks for space
        if (letter != ' '):

            # counter to keep track of space
            i = 0

            # storing morse code of a single character
            citext += letter

        # in case of space
        else:
            # if i = 1 that indicates a new character
            i += 1

            # if i = 2 that indicates a new word
            if i == 2 :

                 # adding space to separate words
                decipher += ' '
            else:

                # accessing the keys using their values (reverse of encryption)
                decipher += list(MORSE_CODE_DICT.keys())[list(MORSE_CODE_DICT
                .values()).index(citext)]
                citext = ''

    return decipher

message = "MPCR Lab"
result = encrypt(message.upper())
print (result)

message = decrypt(result)
print (message)

result

def char2num(X):

    return np.array([ord(char) for char in X] )

def num2char(X):

    return np.array([chr(n) for n in X] )

score = (char2num(result) == 32).astype(int)

score

tones = [a4[0:frequency//2],b4[0:frequency//2]]

Audio(tones[0],rate=framerate)

Audio(tones[1],rate=framerate)

song = np.concatenate([tones[i] for i in score])

Audio(song,rate=framerate)



tones = [a4[0:frequency//2],b4[0:frequency//2],rest[0:frequency//2]]

Audio(tones[2][0:frequency//2],rate=framerate)

message = "CQ"
result = encrypt(message.upper())

result

key = {45:0, 46:1, 32:2}

score = np.vectorize(key.get)(char2num(result)).astype(int)

score

song = np.concatenate([tones[i] for i in score])
Audio(song,rate=framerate)







"""* Dit: 1 unit
* Dah: 3 units
* Intra-character space (the gap between dits and dahs within a character): 1 unit
* Inter-character space (the gap between the characters of a word): 3 units
* Word space (the gap between two words): 7 units

Tune until the pitch is comfortable to your ear. A low tone (300–600 Hz) is most restful to the ear, but a higher tone (500–1200 Hz) often sounds crisper.
"""

framerate=44100

s = 0.1
t = np.linspace(0,s,int(framerate*s))
tone0 = np.sin(2*np.pi* 800 *t)
tone0[:1000] = 0
tone0[-1000:] = 0


t = np.linspace(0,3*s,int(framerate*3*s))
tone1 = np.sin(2*np.pi* 800 *t)
tone1[:1000] = 0
tone1[-1000:] = 0


t = np.linspace(0,5*s,int(framerate*5*s))
tone2 = np.sin(2*np.pi* 800 *t)
tone2[:] = 0

plt.plot(tone0)

plt.plot(tone1)

Audio(tone0,rate=framerate)

Audio(tone1,rate=framerate)

tones = [tone0,tone1,tone2]

message = "SOS"
result = encrypt(message.upper())

result

key = {46:0, 45:1, 32:2}

score = char2num(result)

score

score = np.vectorize(key.get)(score).astype(int)

score

song = np.concatenate([tones[i] for i in score])

Audio(song,rate=framerate)

from scipy.ndimage import gaussian_filter

def sing(message):
    key = {46:0, 45:1, 32:2}
    return np.concatenate([tones[i] for i in np.vectorize(key.get)(char2num(encrypt(message.upper()))).astype(int)])



Audio(gaussian_filter(sing("SOS"),1),rate=framerate)

Audio(gaussian_filter(sing("CQCQ"),1),rate=framerate)

Audio(sing("Hello World"),rate=framerate)





!wget https://freewavesamples.com/files/Kawai-K11-Bob-Snare.wav

data = wavfile.read('Kawai-K11-Bob-Snare.wav')

data[0]

data[1].shape

data[1].shape[0]/data[0]

framerate = data[0]
sounddata = data[1]

Audio(sounddata[:,0],rate=framerate)

import os

def get_sample(url):
    os.system('wget ' + url)
    data = wavfile.read(url.rsplit("/", 1)[1])
    framerate = data[0]
    sounddata = data[1][:,0]
    return sounddata,framerate

url = 'https://freewavesamples.com/files/Bass-Drum-1.wav'
url2 = 'https://freewavesamples.com/files/Kawai-K11-Bob-Snare.wav'

url =  'https://freewavesamples.com/files/Deep-Kick.wav'
url2 = 'https://freewavesamples.com/files/Hip-Hop-Snare-1.wav'

kick = get_sample(url)[0][0:10000]
snare = get_sample(url2)[0][0:10000]

Audio(kick,rate=44100)

Audio(snare,rate=44100)

tones = [kick,snare,tone2]

Audio(sing("CQ"),rate=framerate)

Audio(sing("Hello World"),rate=framerate)

Audio(sing("Ema"),rate=2*framerate)



Audio(sing("Gio"),rate=2*framerate)



Audio(sing("MPCR"),rate=2*framerate)



Audio(sing("Subhosit"),rate=framerate)





def get_sample(url):
    os.system('wget ' + url)
    data = wavfile.read(url.rsplit("/", 1)[1])
    framerate = data[0]
    sounddata = data[1]
    return sounddata,framerate

url =  'http://www.naturesongs.com/redwing1.wav'

bird,framerate = get_sample(url)

Audio(bird,rate=0.4*framerate)











s = 0.1
t = np.linspace(0,s,int(framerate*s))
tone0 = np.sin(2*np.pi* (600+10000*t**2) *t)
tone1 = np.sin(2*np.pi* (500-10000*t**2) *t)

plt.plot(tone0)

Audio(tone0,rate=framerate)

Audio(tone1,rate=framerate)

tones = [tone0,tone1,tone2]

Audio(sing("CQ"),rate=framerate)

plt.plot(sing("Hello"))

Audio(sing("Hello"),rate=framerate)

Audio(sing("Hello Nikita"),rate=2.5*framerate)

Audio(sing("Hello MPCR how are you?"),rate=2*framerate)









s = 0.1
t = np.linspace(0,s,int(framerate*s))
tone0 = np.sin(2*np.pi* (600) *t)
tone1 = np.sin(2*np.pi* (500) *t)

tones = [tone0,tone1,tone2]

Audio(sing("CQ"),rate=framerate)

Audio(sing("Hello MPCR how are you?"),rate=2*framerate)







#Counting

# To return value of a char.
# For example, 2 is returned
# for '2'. 10 is returned for 'A',
# 11 for 'B'
def val(c):
    if c >= '0' and c <= '9':
        return ord(c) - ord('0')
    else:
        return ord(c) - ord('A') + 10;

# To return char for a value. For example
# '2' is returned for 2. 'A' is returned
# for 10. 'B' for 11
def reVal(num):

    if (num >= 0 and num <= 9):
        return chr(num + ord('0'));
    else:
        return chr(num - 10 + ord('A'));

# Utility function to reverse a string
def strev(str):

    len = len(str);
    for i in range(int(len / 2)):
        temp = str[i];
        str[i] = str[len - i - 1];
        str[len - i - 1] = temp;

def toDeci(str,base):
    llen = len(str)
    power = 1 #Initialize power of base
    num = 0     #Initialize result

    # Decimal equivalent is str[len-1]*1 +
    # str[len-2]*base + str[len-3]*(base^2) + ...
    for i in range(llen - 1, -1, -1):

        # A digit in input number must
        # be less than number's base
        if val(str[i]) >= base:
            print('Invalid Number')
            return -1
        num += val(str[i]) * power
        power = power * base
    return num

def fromDeci(base, inputNum):

    res = "";

    index = 0; # Initialize index of result

    # Convert input number is given base
    # by repeatedly dividing it by base
    # and taking remainder
    while (inputNum > 0):
        res+= reVal(inputNum % base);
        inputNum = int(inputNum / base);

    # Reverse the result
    res = res[::-1];

    return res;

score = np.array([0])

song = np.concatenate([tones[i] for i in score])

Audio(song,rate=framerate,autoplay=True)

for i in range(2,10):
    score = np.array(list(fromDeci(2, 2))).astype(int)
    song = np.concatenate([tones[i] for i in score])
    Audio(song,rate=framerate)

score = np.array(list(fromDeci(2, 2))).astype(int)
song = np.concatenate([tones[i] for i in score])
Audio(song,rate=framerate)

def play(i):
    score = np.array(list(fromDeci(2, i))).astype(int)
    return np.concatenate([tones[i] for i in score])

Audio(play(2),rate=framerate)

Audio(play(3),rate=framerate)

Audio(play(4),rate=framerate)

Audio(play(5),rate=framerate)

Audio(play(6),rate=framerate)

Audio(play(7),rate=framerate)

Audio(play(8),rate=framerate)

Audio(play(9),rate=framerate)

playlist =np.concatenate([play(2),tone2,play(3),tone2,play(4),tone2,play(5),tone2,play(6),tone2,play(7)])

Audio(playlist,rate=framerate)

np.concatenate([tone2,play(i)])

songs = [np.concatenate([tone2,play(i)]) for i in range(2,10)]

playlist = np.concatenate(songs)

Audio(playlist,rate=framerate)



Audio(play(9),rate=framerate)













"""# Extras"""

data = np.sin(2*np.pi*220*t) + np.sin(2*np.pi*224*t)



plt.plot(t[0:10000],data[0:10000])

plt.plot(t[0:10000],data[0:10000])

Audio(data,rate=framerate)

data2 = data[0:framerate]

Audio(data2,rate=framerate,autoplay=True)



data1 = np.sin(2*np.pi*220*t)
data2 = np.exp(-t)

plt.plot(data1[0:1000])

plt.plot(data2[0:100000])

data3 = data1*data2

Audio(data3,rate=framerate,autoplay=True)

plt.plot(data3[0:100000])







def base(t):
    return np.sin(2*np.pi*220*t)*np.exp(-t)

tLeft  = 4*(t/4 - np.fix(t/4))
left   = base(tLeft)

tRight = 4*((t+2)/4 - np.fix((t+2)/4))
right  = base(tRight)


plt.plot(t,left)
plt.plot(t,right)

Audio([left, right],rate=framerate)







!wget http://www.reelclassics.com/Audio_Video/Quotes7r/mgmua_lionroar.wav

data = wavfile.read('mgmua_lionroar.wav')

data[0]

data[1].shape

data[1].shape[0]/data[0]

framerate = data[0]
sounddata = data[1]

time = np.arange(0,len(sounddata))/framerate

E = np.exp(-time)

plt.plot(E)

print('Sample rate:',framerate,'Hz')
print('Total time:',len(sounddata)/framerate,'s')



plt.plot(time,sounddata)

sounddata = sounddata[:,0]

Audio(sounddata,rate=framerate)

plt.plot(time,sounddata)

plt.plot(E)

new_sound = sounddata * E

plt.plot(new_sound)

Audio(new_sound,rate=framerate)









from scipy import signal
import matplotlib.pyplot as plt
t = np.linspace(0, 1, 500)
y = signal.sawtooth(2 * np.pi * 5 * t)
plt.plot(t, y)

framerate = 44100
t = np.linspace(0,5,framerate*5)
data = np.sin(2*np.pi*440*t)

Audio(data,rate=framerate)

framerate = 44100
t = np.linspace(0,5,framerate*5)
data = signal.sawtooth(2*np.pi*440*t)

Audio(data,rate=framerate)

framerate = 44100
t = np.linspace(0,5,framerate*5)
data = signal.sawtooth(2*np.pi*220*t,0.5) + signal.sawtooth(2*np.pi*224*t,0.5)

Audio(data,rate=framerate)



framerate = 44100
t = np.linspace(0,5,framerate*5)
data = signal.square(2*np.pi*440*t)

Audio(data,rate=framerate)



framerate = 44100
t = np.linspace(0,5,framerate*1)
# data = np.sin(2*np.pi*2200*t) + np.sin(2*np.pi*4200*t)

data1 = np.sin(2*np.pi*220*t)
data2 = np.sin(2*np.pi*420*t)

data = np.concatenate((data1,data2,data1,data2,data1,data2))



Audio(data,rate=framerate)

plt.plot(data[0:10000])

from scipy.fft import fftshift

f, t, Sxx = signal.spectrogram(data, framerate)
plt.pcolormesh(t, f, Sxx)
plt.ylabel('Frequency [Hz]')
plt.xlabel('Time [sec]')
plt.show()

f.shape

t.shape

Sxx.shape

plt.pcolormesh(t, f, Sxx)



data = wavfile.read('mgmua_lionroar.wav')

sample_rate = data[0]
audio_data = data[1]

audio_data = audio_data[:,0]

plt.plot(audio_data)

f, t, Sxx = signal.spectrogram(audio_data, sample_rate)
plt.pcolormesh(t, f[0:25], Sxx[0:25,:])
plt.ylabel('Frequency [Hz]')
plt.xlabel('Time [sec]')
plt.show()

Sxx.shape

f.shape

















import matplotlib.pyplot as plt

from matplotlib.patches import Arc

fig=plt.figure()
ax=fig.add_subplot(1,1,1)

plt.plot([0,0],[0,90], color="blue")
plt.plot([0,130],[90,90], color="orange")
plt.plot([130,130],[90,0], color="green")
plt.plot([130,0],[0,0], color="red")
plt.plot([65,65],[0,90], color="pink")

plt.show()

#Create figure
fig=plt.figure()
ax=fig.add_subplot(1,1,1)

#Pitch Outline & Centre Line
plt.plot([0,0],[0,90], color="black")
plt.plot([0,130],[90,90], color="black")
plt.plot([130,130],[90,0], color="black")
plt.plot([130,0],[0,0], color="black")
plt.plot([65,65],[0,90], color="black")

#Assign circles to variables - do not fill the centre circle!
centreCircle = plt.Circle((65,45),9.15,color="red",fill=False)
centreSpot = plt.Circle((65,45),0.8,color="blue")

#Draw the circles to our plot
ax.add_patch(centreCircle)
ax.add_patch(centreSpot)


plt.show()

#Demo Arcs

#Create figure
fig=plt.figure()
ax=fig.add_subplot(1,1,1)

#Pitch Outline & Centre Line
plt.plot([0,0],[0,90], color="black")
plt.plot([0,130],[90,90], color="black")
plt.plot([130,130],[90,0], color="black")
plt.plot([130,0],[0,0], color="black")
plt.plot([65,65],[0,90], color="black")

#Left Penalty Area
plt.plot([16.5,16.5],[65,25],color="black")
plt.plot([0,16.5],[65,65],color="black")
plt.plot([16.5,0],[25,25],color="black")

#Centre Circle/Spot
centreCircle = plt.Circle((65,45),9.15,fill=False)
centreSpot = plt.Circle((65,45),0.8)
ax.add_patch(centreCircle)
ax.add_patch(centreSpot)

#Create Arc and add it to our plot
leftArc = Arc((11,45),height=18.3,width=18.3,angle=0,theta1=310,theta2=50,color="red")

ax.add_patch(leftArc)

plt.show()

plt.axis('off')

def createPitch():

    #Create figure
    fig=plt.figure()
    ax=fig.add_subplot(1,1,1)

    #Pitch Outline & Centre Line
    plt.plot([0,0],[0,90], color="black")
    plt.plot([0,130],[90,90], color="black")
    plt.plot([130,130],[90,0], color="black")
    plt.plot([130,0],[0,0], color="black")
    plt.plot([65,65],[0,90], color="black")

    #Left Penalty Area
    plt.plot([16.5,16.5],[65,25],color="black")
    plt.plot([0,16.5],[65,65],color="black")
    plt.plot([16.5,0],[25,25],color="black")

    #Right Penalty Area
    plt.plot([130,113.5],[65,65],color="black")
    plt.plot([113.5,113.5],[65,25],color="black")
    plt.plot([113.5,130],[25,25],color="black")

    #Left 6-yard Box
    plt.plot([0,5.5],[54,54],color="black")
    plt.plot([5.5,5.5],[54,36],color="black")
    plt.plot([5.5,0.5],[36,36],color="black")

    #Right 6-yard Box
    plt.plot([130,124.5],[54,54],color="black")
    plt.plot([124.5,124.5],[54,36],color="black")
    plt.plot([124.5,130],[36,36],color="black")

    #Prepare Circles
    centreCircle = plt.Circle((65,45),9.15,color="black",fill=False)
    centreSpot = plt.Circle((65,45),0.8,color="black")
    leftPenSpot = plt.Circle((11,45),0.8,color="black")
    rightPenSpot = plt.Circle((119,45),0.8,color="black")

    #Draw Circles
    ax.add_patch(centreCircle)
    ax.add_patch(centreSpot)
    ax.add_patch(leftPenSpot)
    ax.add_patch(rightPenSpot)

    #Prepare Arcs
    leftArc = Arc((11,45),height=18.3,width=18.3,angle=0,theta1=310,theta2=50,color="black")
    rightArc = Arc((119,45),height=18.3,width=18.3,angle=0,theta1=130,theta2=230,color="black")

    #Draw Arcs
    ax.add_patch(leftArc)
    ax.add_patch(rightArc)

    #Tidy Axes
    plt.axis('off')

    #Display Pitch
    plt.show()

createPitch()





"""<img src = "https://upload.wikimedia.org/wikipedia/commons/thumb/d/d4/Solresol_representations.svg/1920px-Solresol_representations.svg.png">"""

#Create figure
fig=plt.figure()
ax=fig.add_subplot(1,1,1)

#Pitch Outline & Centre Line

plt.plot()

#do
do = plt.Circle((20,20),10,color="red",fill=False, linewidth=10)
ax.add_patch(do)


#Tidy Axes
plt.axis('off')
plt.axis('equal')
#Display Pitch
plt.show()

#Create figure
fig=plt.figure()
ax=fig.add_subplot(1,1,1)

#Pitch Outline & Centre Line

plt.plot()

#re
plt.plot([16.5,16.5],[45,25],color="orange", linewidth=10)

#Tidy Axes
plt.axis('off')
plt.axis('equal')
#Display Pitch
plt.show()

#Create figure
fig=plt.figure()
ax=fig.add_subplot(1,1,1)

#Pitch Outline & Centre Line

plt.plot()

#do
leftArc = Arc((11,45),height=18.3,width=18.3,angle=0,theta1=0,theta2=180,color="yellow", linewidth=10)
ax.add_patch(leftArc)


#Tidy Axes
plt.axis('off')
plt.axis('equal')
#Display Pitch
plt.show()

#Create figure
fig=plt.figure()
ax=fig.add_subplot(1,1,1)

#Pitch Outline & Centre Line

plt.plot()

#re
plt.plot([16.5,30.5],[45,25],color="green", linewidth=10)

#Tidy Axes
plt.axis('off')
plt.axis('equal')
#Display Pitch
plt.show()

#Create figure
fig=plt.figure()
ax=fig.add_subplot(1,1,1)

#Pitch Outline & Centre Line

plt.plot()

#re
plt.plot([16.5,30.5],[45,45],color="teal", linewidth=10)

#Tidy Axes
plt.axis('off')
plt.axis('equal')
#Display Pitch
plt.show()

#Create figure
fig=plt.figure()
ax=fig.add_subplot(1,1,1)

#Pitch Outline & Centre Line

plt.plot()

#do
leftArc = Arc((11,45),height=18.3,width=18.3,angle=0,theta1=90,theta2=270,color="blue", linewidth=10)
ax.add_patch(leftArc)


#Tidy Axes
plt.axis('off')
plt.axis('equal')
#Display Pitch
plt.show()

#Create figure
fig=plt.figure()
ax=fig.add_subplot(1,1,1)

#Pitch Outline & Centre Line

plt.plot()

#re
plt.plot([30.5,16.5],[45,25],color="purple", linewidth=10)

#Tidy Axes
plt.axis('off')
plt.axis('equal')
#Display Pitch
plt.show()

